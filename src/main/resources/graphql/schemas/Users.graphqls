# Tipo per rappresentare un Utente
type Users {
    usersID: String
    nome: String
    cognome: String
    ruolo: String
    nomeUtente: String
    email: String
    password: String
    immagine: String 
}

# Tipo di input per creare o aggiornare un Utente
input UsersInput {
    usersID: String
    nome: String
    cognome: String
    ruolo: String
    nomeUtente: String
    email: String
    password: String
    immagine: String
}

# Tipo di input per ParamQuery (configurazione della query)
input ParamQueryInputUsers {
    distinct: Boolean
    all: Boolean
    condizioneWhere: String
    valoriWhere: String
    boleani: String
    orderBy: Boolean
    top: Int
    aggregationType: AggregationTypeUsers
    like: String
    in: [String]
    between: [String]
    having: String
    limit: Int
    offset: Int
}

# Enum per rappresentare i vari tipi di aggregazione
enum AggregationTypeUsers {
    NONE
    MIN
    MAX
    COUNT
    AVG
    SUM
}

# Query per ottenere un utente
type QueryUsers {
    users(paramQuery: ParamQueryInputUsers, users: UsersInput): Users
}
